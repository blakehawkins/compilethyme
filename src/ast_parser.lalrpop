use std::str::FromStr;
use ast::{Op, Expr, Term, Type};

grammar;
// #[LALR] grammar;  // User LR(1) when possible.

pub Expr: Box<Expr> = {
  L_PAREN <e:Expr> R_PAREN => e,
  <t:Term> => box Expr::Trm(t),
  <l:Expr> <o:Op> <r:Term> => box Expr::BinOp(o, l, box Expr::Trm(r)),
  <p:Expr> TERN_Q <a:Expr> TERN_E <b:Term> => box Expr::IfThenElse(p, a, box Expr::Trm(b)),
};

pub Term: Term = {
  Num   => Term::Num(<>),
  TRUE  => Term::T,
  FALSE => Term::F,
};

Op: Op = {
  "+"  => Op::Add,
  "==" => Op::Eq,
};

Num: i64 = {
  r"\d+" => i64::from_str(<>).unwrap(),
};

Bool: bool = {
  TRUE  => true,
  FALSE => false,
};

match {
  "?" => TERN_Q,
  "(" => L_PAREN,
  ")" => R_PAREN,
} else {
  ":"     => TERN_E,
  "true"  => TRUE,
  "false" => FALSE,
  _
}
